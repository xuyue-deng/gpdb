set enable_seqscan=off;
CREATE TYPE rainbow AS ENUM ('r','o','y','g','b','i','v');
CREATE TABLE test_enum (
   h int,
   i rainbow
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'h' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO test_enum VALUES (1, 'v'),(2, 'y'),(3, 'r'),(4, 'g'),(5, 'o'),(6, 'i'),(7, 'b');
CREATE INDEX idx_enum ON test_enum USING gin (i);
SELECT i FROM test_enum WHERE i<'g'::rainbow ORDER BY i;
 i 
---
 r
 o
 y
(3 rows)

SELECT i FROM test_enum WHERE i<='g'::rainbow ORDER BY i;
 i 
---
 r
 o
 y
 g
(4 rows)

SELECT i FROM test_enum WHERE i='g'::rainbow ORDER BY i;
 i 
---
 g
(1 row)

SELECT i FROM test_enum WHERE i>='g'::rainbow ORDER BY i;
 i 
---
 g
 b
 i
 v
(4 rows)

SELECT i FROM test_enum WHERE i>'g'::rainbow ORDER BY i;
 i 
---
 b
 i
 v
(3 rows)

explain (costs off) SELECT i FROM test_enum WHERE i>='g'::rainbow ORDER BY i;
                     QUERY PLAN                      
-----------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Merge Key: i
   ->  Sort
         Sort Key: i
         ->  Bitmap Heap Scan on test_enum
               Recheck Cond: (i >= 'g'::rainbow)
               ->  Bitmap Index Scan on idx_enum
                     Index Cond: (i >= 'g'::rainbow)
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

-- make sure we handle the non-evenly-numbered oid case for enums
create type e as enum ('0', '2', '3');
alter type e add value '1' after '0';
CREATE TABLE t (
   h int,
   i e
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'h' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t select j, (j % 4)::text::e from generate_series(0, 100000) as j;
create index on t using gin (i);
